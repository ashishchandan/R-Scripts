str(cdrs)
boxplot(cdrs$duration~cdrs$seizure_time)
attach(cdrs)
boxplot(duration~
boxplot(duration~seizure_time)
boxplot(Dauer~Sz)
boxplot(Sz~Dauer)
hist(Sz)
hist(Sz, breaks=100)
hist(Dauer, breaks=100)
hist(Dauer, breaks=100)
hist(Sz, breaks=100)
hist(Sz~Servicerufnummer.Unterabteilung, breaks=100)
boxplot(Sz~Servicerufnummer.Unterabteilung, breaks=100)
boxplot(Dauer~Servicerufnummer.Unterabteilung, breaks=100)
boxplot(Dauer~sname, breaks=100)
boxplot(Dauer~B.rufnummer.Land, breaks=100)
boxplot(Dauer~O.c, breaks=100)
boxplot(Dauer~o_c, breaks=100)
Dauer~o_c
x<-Dauer~o_c
x
boxplot(x)
table(Dauer, o_c)
boxplot(table(Dauer, o_c))
barplot(table(Dauer, o_c))
attributes(cdrs)
cdrs[1:5]
cdrs[,1:5]
cdrs[1:5,]
str(cdrs)
iris
str(iris)
attach(iris)
plot(Sepal.Length, Sepal.Width)
boxplot(Sepal.Length, Sepal.Width)
boxplot(Sepal.Length~Sepal.Width)
boxplot(Sepal.Length~Petal.Length)
boxplot(Sepal.Length, Petal.Length)
boxplot(Sepal.Length~Petal.Length)
boxplot(Sepal.Width~Petal.Width)
lotto
lotto<-read.delim('../TEST/lotto/lomi1.txt');
lotto<-read.delim('../TEST/lotto/lomi1.txt', header=T);
lotto<-read.csv('../TEST/lotto/lomi1.txt', header=T);
lotto
lotto[1,]
lotto<-read.csv('../TEST/lotto/lotto.txt', header=T);
lotto
lotto<-read.csv('../TEST/lotto/lotto.txt', header=T, sep="\t");
lotto
str(lotto)
attach(lotto)
plot(Jahr, Zahl1)
plot(Tag, Jahr)
cor.test(Tag, Jahr)
image(Jahr, Zahl1)
persp(Jahr, Zahl1)
table(Jahr)
table(Jahr, Tag)
plot(table(Jahr, Tag))
lotto
source('../TEST/lotto/process_lotto.R')
source('../TEST/lotto/process_lotto.R')
source('../TEST/lotto/process_lotto.R')
source('../TEST/lotto/process_lotto.R')
source('../TEST/lotto/process_lotto.R')
head(lotto)
plot(Zahl1, Zahl2)
cor.test(Zahl1, Zahl2)
histogram(Tag)
histogram(~Zahl1|Tag, data=lotto)
histogram(~Zahl1|Tag, data=lotto)
histogram(~Zahl2|Tag, data=lotto)
histogram(~Zahl2|Monat, data=lotto)
histogram(~Zahl1|Monat, data=lotto)
histogram(~Zahl3|Monat, data=lotto)
histogram(~Zahl4|Monat, data=lotto)
histogram(~Zahl4|Jahr, data=lotto)
histogram(~Zahl1|Jahr, data=lotto)
histogram(~Zahl2|Jahr, data=lotto)
histogram(~Zahl2|Jahr, data=lotto)
histogram(~Super|Jahr, data=lotto)
histogram(~Super|Jahr, data=lotto, breaks=100)
histogram(~Super|Jahr, data=lotto, breaks=10)
histogram(~Super|Jahr, data=lotto, breaks=20)
q()
source('../TEST/data analysis with R - Jeff Leek - Hopkins/quiz.R')
source('../TEST/data analysis with R - Jeff Leek - Hopkins/quiz.R')
source('../TEST/data analysis with R - Jeff Leek - Hopkins/quiz.R')
air
str(air)
str(air)
source('../TEST/data analysis with R - Jeff Leek - Hopkins/quiz.R')
source('../TEST/data analysis with R - Jeff Leek - Hopkins/quiz.R')
names(air)
source('../TEST/data analysis with R - Jeff Leek - Hopkins/quiz.R')
source('../TEST/data analysis with R - Jeff Leek - Hopkins/quiz.R')
source('../TEST/data analysis with R - Jeff Leek - Hopkins/quiz.R')
source('../TEST/data analysis with R - Jeff Leek - Hopkins/quiz.R', print.eval=T)
length(air)
count(air)
length(air[,1])
str(air)
air[Ozone=='NA']
air[Ozone=='NA',]
air[air$Ozone=='NA',]
air[[air$Ozone=='NA',]]
subset(air, Ozone=='NA')
subset(air, air$Ozone=='NA')
subset(air, air$Ozone='NA')
subset(air, Ozone='NA')
subset(air, Ozone=='NA')
subset(air, Ozone==NA)
subset(air, Ozone>100)
subset(air, Ozone='NA')
subset(air, Ozone=='NA')
subset(air, Ozone==20)
subset(air, Ozone==NA)
subset(air, is.na(Ozone))
str(subset(air, is.na(Ozone)))
count(subset(air, is.na(Ozone)))
length(subset(air, is.na(Ozone)))
length(subset(air, is.na(Ozone)),1)
tmp<-subset(air, is.na(Ozone)); count(tmp[,1])
tmp<-subset(air, is.na(Ozone)); length(tmp[,1])
source('../TEST/data analysis with R - Jeff Leek - Hopkins/quiz.R', print.eval=T)
source('../TEST/data analysis with R - Jeff Leek - Hopkins/quiz.R', print.eval=T)
tmp<-subset(air, !is.na(Ozone)); tmp
tmp<-subset(air, !is.na(Ozone)); str(tmp)
tmp<-subset(air, !is.na(Ozone)); mean(tmp$Ozone)
tmp<-subset(air, Ozone>31 & Temp>90); tmp;
for (i in names(air)) {print i}
for (i in names(air)) (print i)
for (i in names(air)) {print i]
for(i in names(air)) {print i]
for(i in names(air)) {print i}
for(i in names(air)) {print i;}
names(air)
for(i in names(air)){print i;}
source('../TEST/data analysis with R - Jeff Leek - Hopkins/quiz.R', print.eval=T)
source('../TEST/data analysis with R - Jeff Leek - Hopkins/quiz.R', print.eval=T)
source('../TEST/data analysis with R - Jeff Leek - Hopkins/quiz.R', print.eval=T)
source('../TEST/data analysis with R - Jeff Leek - Hopkins/quiz.R', print.eval=T)
source('../TEST/data analysis with R - Jeff Leek - Hopkins/quiz.R', print.eval=T)
air
str(air)#
apply(air$Wind, sd)
apply(air$Wind, FUN=sd)
?apply
apply(air$Wind, 1, sd)
apply(air, 1, sd)
apply(air, 2, sd)
rand(1,5)
rnd(1,5)
?random
?rand
sample(1:100,5)
sample(1:100,5)
sample(1:100,5)
air[sample(1:length(air[,1],5)
)
air[sample(1:length(air[,1],5),]
air[sample(1:length(air[,1]),]
length(air[,1])
air[sample(1:153,5]
air[sample(1:153,5)]
air[sample(1:153,5),]
air[sample(1:153,5),]
attach(air); aggregate(Ozone, Month)
attach(air); aggregate(Ozone, Month, fun=mean)
attach(air); aggregate(Ozone, Month, FUN=mean)
attach(air); aggregate(Ozone~Month, FUN=mean)
source('../TEST/data analysis with R - Jeff Leek - Hopkins/quiz.R', print.eval=T)
q()
install.packages('smmrm')
install.packages('smcrm')
install.packages('SMCRM')
library(SMCRM)
ls(po="package:SMCRM")
ls(pos="package:SMCRM")
SMCRM::ac
SMCRM::
library(help=
library(help=SMCRM)
)
library(help=SMCRM)
lifeExp<-read.delim('https://d396qusza40orc.cloudfront.net/introstats/R%20tutorials/LifeExpRegion.txt', header=T)
setInternet2(TRUE)
lifeExp<-read.delim('https://d396qusza40orc.cloudfront.net/introstats/R%20tutorials/LifeExpRegion.txt', header=T)
lifeExp<-read.delim('https://d396qusza40orc.cloudfront.net/introstats/R%20tutorials/LifeExpRegion.txt', header=T, setInternet2=T)
setInternet2(TRUE)
lifeExp<-read.delim('https://d396qusza40orc.cloudfront.net/introstats/R%20tutorials/LifeExpRegion.txt', header=T)
library(RCurl)
install.packages(RCurl)
install.packages('RCurl')
library(RCurl)
getUrl(https://d396qusza40orc.cloudfront.net/introstats/R%20tutorials/LifeExpRegion.txt)
getUrl('https://d396qusza40orc.cloudfront.net/introstats/R%20tutorials/LifeExpRegion.txt')
getURL('https://d396qusza40orc.cloudfront.net/introstats/R%20tutorials/LifeExpRegion.txt')
url_data <- getURL('https://d396qusza40orc.cloudfront.net/introstats/R%20tutorials/LifeExpRegion.txt')
remove.packages('RCurl')
installed.packages()
life
life[1:5,]
life<-read.delim('../TEST/Statistics with R - Coursera/LifeExp.txt', header=T)
life
str(life);
life<-read.delim('../TEST/Statistics with R - Coursera/LifeExp.txt', header=F)
str(life);
life<-read.csv('../TEST/Statistics with R - Coursera/LifeExp.txt', header=F)
str(life);
head(life)
life<-read.csv('../TEST/Statistics with R - Coursera/LifeExp.txt', header=F)
life
head(life)
life<-read.csv('../TEST/Statistics with R - Coursera/LifeExp.txt', header=F, sep=" ")
head(life)
(life[1:40,])
head(life)
names(life)<-c('Country', 'v2', 'LifeExp', 'v4','Continent')
head(life)
life$v2<-NA
head(life)
life$v2<-NULL
head(life)
life$v4<-NULL
head(life)
boxplot(LifeExp, Continent)
attach(life)
boxplot(LifeExp, Continent)
boxplot(LifeExp~Continent)
aggregate(LifeExp, Continent)
aggregate(LifeExp, Continent, FUN=mean)
aggregate(LifeExp~Continent, FUN=mean)
aggregate(LifeExp~Continent, FUN=max)
aggregate(LifeExp~Continent, FUN=min)
life
head(life)
names(life)<-c('Country', 'LifeExp', 'Region')
head(life)
life[Region=='EAP',]
attach(life)
life[Region=='EAP',]
table(Region)
lifesplit(life, Region)
life <- split(life, Region)
str(life)
plot(life)
life<-read.csv('../TEST/Statistics with R - Coursera/LifeExp.txt', header=F, sep=" ");
str(life)
life$V2<-NULL; life$V4<-NULL; names(life)<-c('Country', 'LifeExp', 'Region')
str(life)
attach(life); lifesplit<-split(life, Region);
levels(Region)
lifeEAP<-life[Region=='EAP',]; lifeSSA<-life[Region=='SSA']
lifeEAP<-life[Region=='EAP',]; lifeSSA<-life[Region=='SSA',]
plot(lifeEAP);
boxplot(lifeEAP$LifeExp, lifeSSA$LifeExp);
summary(lifeEAP);
summary(lifeEAP$LifeExp);
quantile(lifeEAP$LifeExp);
examples(quantile)
example(quantile)
summary(lifeEAP$LifeExp);
summary(lifeSSA$LifeExp);
boxplot(lifeEAP$LifeExp, lifeSSA$LifeExp);
boxplot(lifeEAP$LifeExp, lifeSSA$LifeExp, range=0, border=rainbow(2), names=c('EAP', 'SSA'));
boxplot(lifeEAP$LifeExp, lifeSSA$LifeExp, range=0, border=rainbow(2), names=c('EAP', 'SSA'), main="lifeexp");
source('../TEST/Statistics with R - Coursera/2.1 Relationships between quantitative and categorical variables.R')
source('../TEST/Statistics with R - Coursera/2.1 Relationships between quantitative and categorical variables.R')
plot(lifeEAP$LifeExp);
plot(lifeEAP$LifeExp, type="l");
plot(lifeEAP$LifeExp, lifeSSA$LifeExp, type="l");
hist(lifeEAP$LifeExp)
hist(lifeEAP$LifeExp, breaks=100)
hist(lifeEAP$LifeExp, breaks=20)
hist(lifeSSA$LifeExp, breaks=20)
hist(lifeEAP$LifeExp, breaks=20)
hist(lifeSSA$LifeExp, lifeEAP$LifeExp, breaks=20)
skell
skell<-read.delim('../TEST/Statistics with R - Coursera/Skeleton.txt', header=F)
head(skell)
str(skell)
skell<-read.table('../TEST/Statistics with R - Coursera/Skeleton.txt', header=T)
str(skell)
str(skell)
head(skell)
attach(skell)
levels(BMI)
BMI<-factor(BMI, levels=c('underweight', 'normal', 'overweight', 'obese')
)
BMI
BMI<-factor(BMI, levels=c('underweight', 'normal', 'overweight', 'obese'))
)SEX<-factor(SEX, levels=c(1, 2), names=c('Male', 'Female'))
SEX<-factor(SEX, levels=c(1, 2), names=c('Male', 'Female'))
SEX<-factor(SEX, levels=c('1', '2'), names=c('Male', 'Female'))
SEX<-factor(SEX, levels=c('1', '2'), labels=c('Male', 'Female'))
SEX<-factor(Sex, levels=c('1', '2'), labels=c('Male', 'Female'))
table(BMI)
table(BMI)/sum(BMI)
table(BMI)/400
relfreqBMI<-table(BMI)/400; freqBMI<-table(BMI); cbind(freqBMI, relfreqBMI)
install.packages('gmodels')
library(gmodels)
head(skell)
attach(skell)
table(Sex, BMI)
table(Sex, BMI, FUN=mean)
aggregate(Sex ~ BMI)
aggregate(Sex ~ BMI, fun=mean)
aggregate(Sex,BMI, fun=mean)
aggregate(Sex|BMI, fun=mean)
aggregate(Sex ~ BMI, FUN=mean)
install.packages('gmodels'); library(gmodels);
gmodels::CrossTable(BMI, Sex)
joint
joint <- gmodels::CrossTable(BMI, Sex)
joint <- gmodels::CrossTable(BMI, Sex); joint
barplot(joint$t)
barplot(joint$t, beside=T)
barplot(joint$t, beside=T, col=rainbow(4), ylab='Frequency', xlab='Sex')
barplot(joint$t, beside=T, col=rainbow(4), ylab='Frequency', xlab='Sex')
legend(topright, c('underweight', 'normal', 'overweight', 'obese'));
legend('topright', c('underweight', 'normal', 'overweight', 'obese'));
legend('topright', c('underweight', 'normal', 'overweight', 'obese'), pch=15, col=rainbow(4));
q()
life<-read.csv('../TEST/Statistics with R - Coursera/LifeExp.txt', header=F, sep=" ");
str(life)
life<-read.csv('../TEST/Statistics with R - Coursera/LifeExpGDPHIV.txt', header=F, sep=" ");
str(life)
life$V6<-NULL; life$V4<-NULL; life$V2<-NULL;
str(life)
life[1:5,]
names(life)<-c('Country', 'LifeExpectancy', 'GDP', 'HIV')
life[1:5,]
attach(life);
plot(LifeExpectancy, GDP);
cor(LifeExpectancy, GDP);
cor-test(LifeExpectancy, GDP);
cor.test(LifeExpectancy, GDP);
cor(HIV, GDP);
plot(HIV, GDP);
plot(LifeExpectancy, GDP);
plot(GDP, LifeExpectancy);
cor(GDP, LifeExpectancy);
cor.test(GDP, LifeExpectancy);
plot(HIV, LifeExpectancy);
cor.test(HIV, LifeExpectancy);
skell
head(skell)
corr(skell$BMI, skell$DGDifference)
cor(skell$BMI, skell$DGDifference)
skell<-read.csv('../TEST/Statistics with R - Coursera/SkeletonBMI.Quantitative.tst');
head(skell);
skell<-read.csv('../TEST/Statistics with R - Coursera/SkeletonBMI.Quantitative.tst', header=T, sep=" ");
head(skell);
skell<-read.csv('../TEST/Statistics with R - Coursera/SkeletonBMI.Quantitative.tst', header=T);
head(skell);
str(skell);
skell<-read.table('../TEST/Statistics with R - Coursera/SkeletonBMI.Quantitative.tst', header=T);
str(skell);
skell<-read.table('../TEST/Statistics with R - Coursera/SkeletonBMI.Quantitative.tst', header=T);
attach(skell);
plot(BMIquant, DGDifference);
plot(BMIquant, DGDifference, pch=20);
plot(BMIquant, DGDifference, pch=20, col=c('blue'));
plot(BMIquant, DGDifference, pch=20, col=c('blue'));
cor(BMIquant, DGDifference);
cor.test(BMIquant, DGDifference);
srt(cor(BMIquant, DGDifference);)
summary(cor(BMIquant, DGDifference);)
summary(cor(BMIquant, DGDifference))
qnorm(1)
qnorm(.95)
?qnorm
(2.1-2)/(0.25*sqrt(35))
((2.1-2)/(0.25))*sqrt(35)
qnorm(0.95)
((2.1-2)/(0.25))*sqrt(30)
((2.1-2)/(0.25))*sqrt(20)
pnorm(1,100)
pnorm(1:100)
plot(pnorm(1:100))
plot(pnorm(0:1))
seq(1:3, by=0.1)
seq(1, 3, by=0.1)
plot(pnorm(seq(0,3, by=0.1)))
plot(rnorm(seq(0,3, by=0.1)))
plot(qnorm(seq(0,3, by=0.1)))
plot(qnorm(seq(1,3, by=0.1)))
plot(rnorm(seq(0,3, by=0.1)))
plot(qnorm(seq(1,3, by=0.1)))
plot(qnorm(seq(1,3, by=0.1)))
plot(qnorm(seq(1,3, by=0.1)))
plot(rnorm(seq(1,3, by=0.1)))
plot(rnorm(seq(1,3, by=0.1)))
plot(rnorm(seq(1,3, by=0.1)))
plot(rnorm(seq(1,3, by=0.1)))
plot(rnorm(seq(1,3, by=0.1)))
plot(rnorm(seq(1,3, by=0.1)))
plot(rnorm(seq(1,3, by=0.1)))
plot(rnorm(seq(1,3, by=0.1)))
plot(rnorm(seq(1,3, by=0.1)))
plot(rnorm(seq(1,3, by=0.1)))
plot(dnorm(seq(1,3, by=0.1)))
plot(dnorm(seq(1,3, by=0.1)))
plot(pnorm(seq(1,3, by=0.1)))
plot(qnorm(seq(1,3, by=0.1)))
plot(rnorm(seq(1,3, by=0.1)))
plot(rnorm(seq(1,3, by=0.1)))
plot(dnorm(seq(1,3, by=0.1)))
plot(pnorm(seq(1,3, by=0.1)))
plot(qnorm(seq(1,3, by=0.1)))
example(qnorm)
plot(function(x) dnorm(x, log = TRUE), -60, 50)
plot(function(x) dnorm(x, log = TRUE), -60, 50)
plot(function(x) dnorm(x, log = TRUE), -100, 50)
dnorm(0)
sample(c(-1,1), 1000, replace = TRUE)
plot(sample(c(-1,1), 1000, replace = TRUE))
plot(sample(c(-1,1), 1000))
plot(sample(c(-1,1), 1000, replace = TRUE))
seq <- sample(c(-1,1), 1000, replace = TRUE)
seq
plot(cumsum(seq));
summary(cumsum(seq));
seq <- sample(c(-1,1), 1000, replace = TRUE);
 plot(cumsum(seq), type = 'l');
source('../TEST/practice/coin.R');
source('../TEST/practice/coin.R');
source('../TEST/practice/coin.R');
source('../TEST/practice/coin.R');
source('../TEST/practice/coin.R');
source('../TEST/practice/coin.R');
source('../TEST/practice/coin.R');
source('../TEST/practice/coin.R');
source('../TEST/practice/coin.R');
 emptyArray <- c()
 system.time(
   for(i in 1:100000) {
       emptyArray[i] <- i
   })
examples('ets');
example('ets');
?ets
??ets
sample(c(0,1),3)
sample(c(0,1),3, replace=T)
sample(c(0,1),3, replace=T)
sample(c(0,1),3, replace=T)
sample(c(0,1),3, replace=T)
sample(c(0,1),3, replace=T)
sample(c(0,1),3, replace=T)
sample(c(0,1),3, replace=T)
sample(c(0,3),3, replace=T)
dbinom(0,size=3,prob=0.5)
example(dbinom)
q()
ls()
save.image("C:\\Users\\calin\\Documents\\RWorkspacee")
rm(list=ls())
ls
ls()
source('explore.R');
library(randomForest)
fit <- randomForest(status_group~amount_tsh+gps_height+num_private+basin+region+population+extraction_type+payment+water_quality+quantity+source, data=train, importance=TRUE, ntree=100)
fit
varImpPlot(fit)
str(train);
table(quantity);
table(extraction_type);
table(extraction_type, status_group);
plot(table(extraction_type, status_group);)
plot(table(extraction_type, status_group))
plot(table(extraction_type, status_group), col=1:3)
varImpPlot(fit)
plot(table(extraction_type, status_group), col=3:5)
plot(table(extraction_type, status_group), col=c('green', 'yellow', 'red'))
varImpPlot(fit)
plot(table(quantity, status_group), col=c('green', 'yellow', 'red'));
install.packages('rattle')
install.packages('rpart.plot')
install.packages('RColorBrewer')
library(rattle)
library(rpart.plot)
library(RColorBrewer)
fancyRpartPlot(fit)
fit
varImpPlot(fit)
fit <- randomForest(status_group~amount_tsh+gps_height+num_private+basin+region+population+extraction_type+payment+water_quality+quantity+source, data=train, importance=TRUE, ntree=400)
varImpPlot(fit)
Predict<-predict(data=test, fit)
head(Predict)
write.csv(data.frame(id=test$id, status_group=Prediction), file='Out_randomf.csv', row.names=F);
write.csv(data.frame(id=test$id, status_group=Predict), file='Out_randomf.csv', row.names=F);
str(test)
res<-data.frame(id=test$id,status_group=Predict)
str(res)
Predict<-predict(data=test, fit)
str(Predict)
Predict<-predict(fit, test)
varImpPlot(fit)
fit
Predict<-predict(fit, test)
Predict<-NULL
Predict<-predict(fit, test)
train<-read.csv('TrainingSetValues.csv', header=T);
attach(train);
fit <- randomForest(status_group~amount_tsh+gps_height+num_private+basin+region+population+extraction_type+payment+water_quality+quantity+source, data=train, importance=TRUE, ntree=500)
save.image("C:\\Users\\calin\\Documents\\water")
q()
