getUrl(https://d396qusza40orc.cloudfront.net/introstats/R%20tutorials/LifeExpRegion.txt)
getUrl('https://d396qusza40orc.cloudfront.net/introstats/R%20tutorials/LifeExpRegion.txt')
getURL('https://d396qusza40orc.cloudfront.net/introstats/R%20tutorials/LifeExpRegion.txt')
url_data <- getURL('https://d396qusza40orc.cloudfront.net/introstats/R%20tutorials/LifeExpRegion.txt')
remove.packages('RCurl')
installed.packages()
life
life[1:5,]
life<-read.delim('../TEST/Statistics with R - Coursera/LifeExp.txt', header=T)
life
str(life);
life<-read.delim('../TEST/Statistics with R - Coursera/LifeExp.txt', header=F)
str(life);
life<-read.csv('../TEST/Statistics with R - Coursera/LifeExp.txt', header=F)
str(life);
head(life)
life<-read.csv('../TEST/Statistics with R - Coursera/LifeExp.txt', header=F)
life
head(life)
life<-read.csv('../TEST/Statistics with R - Coursera/LifeExp.txt', header=F, sep=" ")
head(life)
(life[1:40,])
head(life)
names(life)<-c('Country', 'v2', 'LifeExp', 'v4','Continent')
head(life)
life$v2<-NA
head(life)
life$v2<-NULL
head(life)
life$v4<-NULL
head(life)
boxplot(LifeExp, Continent)
attach(life)
boxplot(LifeExp, Continent)
boxplot(LifeExp~Continent)
aggregate(LifeExp, Continent)
aggregate(LifeExp, Continent, FUN=mean)
aggregate(LifeExp~Continent, FUN=mean)
aggregate(LifeExp~Continent, FUN=max)
aggregate(LifeExp~Continent, FUN=min)
life
head(life)
names(life)<-c('Country', 'LifeExp', 'Region')
head(life)
life[Region=='EAP',]
attach(life)
life[Region=='EAP',]
table(Region)
lifesplit(life, Region)
life <- split(life, Region)
str(life)
plot(life)
life<-read.csv('../TEST/Statistics with R - Coursera/LifeExp.txt', header=F, sep=" ");
str(life)
life$V2<-NULL; life$V4<-NULL; names(life)<-c('Country', 'LifeExp', 'Region')
str(life)
attach(life); lifesplit<-split(life, Region);
levels(Region)
lifeEAP<-life[Region=='EAP',]; lifeSSA<-life[Region=='SSA']
lifeEAP<-life[Region=='EAP',]; lifeSSA<-life[Region=='SSA',]
plot(lifeEAP);
boxplot(lifeEAP$LifeExp, lifeSSA$LifeExp);
summary(lifeEAP);
summary(lifeEAP$LifeExp);
quantile(lifeEAP$LifeExp);
examples(quantile)
example(quantile)
summary(lifeEAP$LifeExp);
summary(lifeSSA$LifeExp);
boxplot(lifeEAP$LifeExp, lifeSSA$LifeExp);
boxplot(lifeEAP$LifeExp, lifeSSA$LifeExp, range=0, border=rainbow(2), names=c('EAP', 'SSA'));
boxplot(lifeEAP$LifeExp, lifeSSA$LifeExp, range=0, border=rainbow(2), names=c('EAP', 'SSA'), main="lifeexp");
source('../TEST/Statistics with R - Coursera/2.1 Relationships between quantitative and categorical variables.R')
source('../TEST/Statistics with R - Coursera/2.1 Relationships between quantitative and categorical variables.R')
plot(lifeEAP$LifeExp);
plot(lifeEAP$LifeExp, type="l");
plot(lifeEAP$LifeExp, lifeSSA$LifeExp, type="l");
hist(lifeEAP$LifeExp)
hist(lifeEAP$LifeExp, breaks=100)
hist(lifeEAP$LifeExp, breaks=20)
hist(lifeSSA$LifeExp, breaks=20)
hist(lifeEAP$LifeExp, breaks=20)
hist(lifeSSA$LifeExp, lifeEAP$LifeExp, breaks=20)
skell
skell<-read.delim('../TEST/Statistics with R - Coursera/Skeleton.txt', header=F)
head(skell)
str(skell)
skell<-read.table('../TEST/Statistics with R - Coursera/Skeleton.txt', header=T)
str(skell)
str(skell)
head(skell)
attach(skell)
levels(BMI)
BMI<-factor(BMI, levels=c('underweight', 'normal', 'overweight', 'obese')
)
BMI
BMI<-factor(BMI, levels=c('underweight', 'normal', 'overweight', 'obese'))
)SEX<-factor(SEX, levels=c(1, 2), names=c('Male', 'Female'))
SEX<-factor(SEX, levels=c(1, 2), names=c('Male', 'Female'))
SEX<-factor(SEX, levels=c('1', '2'), names=c('Male', 'Female'))
SEX<-factor(SEX, levels=c('1', '2'), labels=c('Male', 'Female'))
SEX<-factor(Sex, levels=c('1', '2'), labels=c('Male', 'Female'))
table(BMI)
table(BMI)/sum(BMI)
table(BMI)/400
relfreqBMI<-table(BMI)/400; freqBMI<-table(BMI); cbind(freqBMI, relfreqBMI)
install.packages('gmodels')
library(gmodels)
head(skell)
attach(skell)
table(Sex, BMI)
table(Sex, BMI, FUN=mean)
aggregate(Sex ~ BMI)
aggregate(Sex ~ BMI, fun=mean)
aggregate(Sex,BMI, fun=mean)
aggregate(Sex|BMI, fun=mean)
aggregate(Sex ~ BMI, FUN=mean)
install.packages('gmodels'); library(gmodels);
gmodels::CrossTable(BMI, Sex)
joint
joint <- gmodels::CrossTable(BMI, Sex)
joint <- gmodels::CrossTable(BMI, Sex); joint
barplot(joint$t)
barplot(joint$t, beside=T)
barplot(joint$t, beside=T, col=rainbow(4), ylab='Frequency', xlab='Sex')
barplot(joint$t, beside=T, col=rainbow(4), ylab='Frequency', xlab='Sex')
legend(topright, c('underweight', 'normal', 'overweight', 'obese'));
legend('topright', c('underweight', 'normal', 'overweight', 'obese'));
legend('topright', c('underweight', 'normal', 'overweight', 'obese'), pch=15, col=rainbow(4));
q()
life<-read.csv('../TEST/Statistics with R - Coursera/LifeExp.txt', header=F, sep=" ");
str(life)
life<-read.csv('../TEST/Statistics with R - Coursera/LifeExpGDPHIV.txt', header=F, sep=" ");
str(life)
life$V6<-NULL; life$V4<-NULL; life$V2<-NULL;
str(life)
life[1:5,]
names(life)<-c('Country', 'LifeExpectancy', 'GDP', 'HIV')
life[1:5,]
attach(life);
plot(LifeExpectancy, GDP);
cor(LifeExpectancy, GDP);
cor-test(LifeExpectancy, GDP);
cor.test(LifeExpectancy, GDP);
cor(HIV, GDP);
plot(HIV, GDP);
plot(LifeExpectancy, GDP);
plot(GDP, LifeExpectancy);
cor(GDP, LifeExpectancy);
cor.test(GDP, LifeExpectancy);
plot(HIV, LifeExpectancy);
cor.test(HIV, LifeExpectancy);
skell
head(skell)
corr(skell$BMI, skell$DGDifference)
cor(skell$BMI, skell$DGDifference)
skell<-read.csv('../TEST/Statistics with R - Coursera/SkeletonBMI.Quantitative.tst');
head(skell);
skell<-read.csv('../TEST/Statistics with R - Coursera/SkeletonBMI.Quantitative.tst', header=T, sep=" ");
head(skell);
skell<-read.csv('../TEST/Statistics with R - Coursera/SkeletonBMI.Quantitative.tst', header=T);
head(skell);
str(skell);
skell<-read.table('../TEST/Statistics with R - Coursera/SkeletonBMI.Quantitative.tst', header=T);
str(skell);
skell<-read.table('../TEST/Statistics with R - Coursera/SkeletonBMI.Quantitative.tst', header=T);
attach(skell);
plot(BMIquant, DGDifference);
plot(BMIquant, DGDifference, pch=20);
plot(BMIquant, DGDifference, pch=20, col=c('blue'));
plot(BMIquant, DGDifference, pch=20, col=c('blue'));
cor(BMIquant, DGDifference);
cor.test(BMIquant, DGDifference);
srt(cor(BMIquant, DGDifference);)
summary(cor(BMIquant, DGDifference);)
summary(cor(BMIquant, DGDifference))
qnorm(1)
qnorm(.95)
?qnorm
(2.1-2)/(0.25*sqrt(35))
((2.1-2)/(0.25))*sqrt(35)
qnorm(0.95)
((2.1-2)/(0.25))*sqrt(30)
((2.1-2)/(0.25))*sqrt(20)
pnorm(1,100)
pnorm(1:100)
plot(pnorm(1:100))
plot(pnorm(0:1))
seq(1:3, by=0.1)
seq(1, 3, by=0.1)
plot(pnorm(seq(0,3, by=0.1)))
plot(rnorm(seq(0,3, by=0.1)))
plot(qnorm(seq(0,3, by=0.1)))
plot(qnorm(seq(1,3, by=0.1)))
plot(rnorm(seq(0,3, by=0.1)))
plot(qnorm(seq(1,3, by=0.1)))
plot(qnorm(seq(1,3, by=0.1)))
plot(qnorm(seq(1,3, by=0.1)))
plot(rnorm(seq(1,3, by=0.1)))
plot(rnorm(seq(1,3, by=0.1)))
plot(rnorm(seq(1,3, by=0.1)))
plot(rnorm(seq(1,3, by=0.1)))
plot(rnorm(seq(1,3, by=0.1)))
plot(rnorm(seq(1,3, by=0.1)))
plot(rnorm(seq(1,3, by=0.1)))
plot(rnorm(seq(1,3, by=0.1)))
plot(rnorm(seq(1,3, by=0.1)))
plot(rnorm(seq(1,3, by=0.1)))
plot(dnorm(seq(1,3, by=0.1)))
plot(dnorm(seq(1,3, by=0.1)))
plot(pnorm(seq(1,3, by=0.1)))
plot(qnorm(seq(1,3, by=0.1)))
plot(rnorm(seq(1,3, by=0.1)))
plot(rnorm(seq(1,3, by=0.1)))
plot(dnorm(seq(1,3, by=0.1)))
plot(pnorm(seq(1,3, by=0.1)))
plot(qnorm(seq(1,3, by=0.1)))
example(qnorm)
plot(function(x) dnorm(x, log = TRUE), -60, 50)
plot(function(x) dnorm(x, log = TRUE), -60, 50)
plot(function(x) dnorm(x, log = TRUE), -100, 50)
dnorm(0)
sample(c(-1,1), 1000, replace = TRUE)
plot(sample(c(-1,1), 1000, replace = TRUE))
plot(sample(c(-1,1), 1000))
plot(sample(c(-1,1), 1000, replace = TRUE))
seq <- sample(c(-1,1), 1000, replace = TRUE)
seq
plot(cumsum(seq));
summary(cumsum(seq));
seq <- sample(c(-1,1), 1000, replace = TRUE);
 plot(cumsum(seq), type = 'l');
source('../TEST/practice/coin.R');
source('../TEST/practice/coin.R');
source('../TEST/practice/coin.R');
source('../TEST/practice/coin.R');
source('../TEST/practice/coin.R');
source('../TEST/practice/coin.R');
source('../TEST/practice/coin.R');
source('../TEST/practice/coin.R');
source('../TEST/practice/coin.R');
 emptyArray <- c()
 system.time(
   for(i in 1:100000) {
       emptyArray[i] <- i
   })
examples('ets');
example('ets');
?ets
??ets
sample(c(0,1),3)
sample(c(0,1),3, replace=T)
sample(c(0,1),3, replace=T)
sample(c(0,1),3, replace=T)
sample(c(0,1),3, replace=T)
sample(c(0,1),3, replace=T)
sample(c(0,1),3, replace=T)
sample(c(0,1),3, replace=T)
sample(c(0,3),3, replace=T)
dbinom(0,size=3,prob=0.5)
example(dbinom)
q()
ls
ls()
load("C:\\Users\\calin\\Documents\\water")
ls()
Prediction
head(Prediction)
str(test)
rm(list=ls())
load("C:\\Users\\calin\\Documents\\water")
ls()
Prediction
fit
fit <- randomForest(status_group~amount_tsh+gps_height+num_private+basin+region+population+extraction_type+payment+water_quality+quantity+source, data=train, importance=TRUE, ntree=200)
varImpPlot(fit)
install.packages('randomForest')
library(randomForest)
fit <- randomForest(status_group~amount_tsh+gps_height+num_private+basin+region+population+extraction_type+payment+water_quality+quantity+source, data=train, importance=TRUE, ntree=200)
str(train)
train<-merge(train, trainLabels);
str(train)
fit <- randomForest(status_group~amount_tsh+gps_height+num_private+basin+region+population+extraction_type+payment+water_quality+quantity+source, data=train, importance=TRUE, ntree=200)
fit
varImpPlot(fit)
Predict<-predict(fit, test)
write.csv(data.frame(id=test$id, status_group=Predict), file='Out_randomf.csv', row.names=F);
Predict
Predict<-predict(fit, test)
str(test)
test$status_group<-NA
Predict<-predict(fit, test)
test$status_group<-NULL
Predict<-predict(fit, test)
str(train)
str(test)
levels(test$date_recorded)<-levels(train$date_recorded);
levels(test$funder)<-levels(train$funder);
levels(test$installer)<-levels(train$installer);
levels(test$wpt_name)<-levels(train$wpt_name);
levels(test$subvillage)<-levels(train$subvillage);
levels(test$ward)<-levels(train$ward);
levels(test$scheme_management)<-levels(train$scheme_management);
levels(test$extraction_type)<-levels(train$extraction_type);
Predict<-predict(fit, test)
head(Predict)
write.csv(data.frame(id=test$id, status_group=Predict), file='Out_randomf.csv', row.names=F);
str(Predict)
write.csv(data.frame(id=test$id, status_group=Predict), file='Out_randomf2.csv', row.names=F);
save.image("C:\\Users\\calin\\Documents\\water2")
q()
ls()
str(train)
str(all)
getwd()
setwd('../TEST/DrivenData - Pump it Up Data Mining the Water Table/')
source('explore_fit.R');
source('explore_fit.R', print.eval=T);
fit100
fit100 <- randomForest(status_group ~ amount_tsh + date_recorded + funder + gps_height + installer + longitude + latitude + basin + region + population + public_meeting + scheme_management + permit + construction_year + extraction_type + extraction_type_group + extraction_type_class + management + management_group + payment + payment_type + water_quality + quality_group + quantity + quantity_group + source + source_type + source_class + waterpoint_type + waterpoint_type_group, data=train, importance=TRUE, ntree=100)
fit200 <- randomForest(status_group ~., data=train, importance=TRUE, ntree=200)
fit200
fit200.pred<-predict(fit200, test)
out<-data.frame(id=test$id, status_group=fit200.pred);
out$status_group[is.na(out$status_group)]<-'functional'; # 10 elements NA
write.csv(out, file='OutRF200.csv', row.names=F);
fit200.pred
fit200
fit10
fit50
fit100
fit5 <- randomForest(status_group ~., data=train, importance=TRUE, ntree=5)
fit5
barplot(c(25.42,22.28,19.16,18.87,18.63)
)
varImpPlot(fit200)
summary(fit200)
randomForest::partialPlot(fit200)
randomForest::varUsed(fit200)
randomForest::importance(fit200)
t<-getTree(fit200);
t
plot(t); text(t)
str(t)
head(t);
plot(trainGeo$longitude, trainGeo$latitude, pch=20, col=trainGeo$status_group);
plot(trainGeo$longitude, trainGeo$latitude, pch=20, col=trainGeo$status_group, title="Functional/Not Functional water pumps in Tanzania", xlab="Longitude", ylab="Latitude");
plot(trainGeo$longitude, trainGeo$latitude, pch=20, col=trainGeo$status_group, main="Functional/Not Functional water pumps in Tanzania", xlab="Longitude", ylab="Latitude");
#plot(table(substr(train$date_recorded, 1, 7), train$status_group), col=train$status_group);
plot(table(substr(train$date_recorded, 1, 7), train$status_group), col=train$status_group);
plot(table(train$date_recorded, train$status_group), col=train$status_group);
plot(table(train$date_recorded, train$status_group), col=2:4);
plot(table(train$date_recorded, train$status_group), col=1:3);
plot(table(train$date_recorded, train$status_group), col=3:5);
plot(table(train$date_recorded, train$status_group), col=c('red', 'yellow', 'green')#);
plot(table(train$date_recorded, train$status_group), col=c('red', 'yellow', 'green'));
plot(table(train$date_recorded, train$status_group), col=c('red', 'yellow','green'));
plot(table(train$date_recorded, train$status_group), col=c('green', 'yellow','red'));
plot(table(train$date_recorded, train$status_group), col=c('green', 'yellow','red'), main="waterpump status based on recorded_date (strong)");
plot(table(train$construction_year, train$status_group), col=c('green', 'yellow','red'), main="waterpump status based on recorded_date (strong)");
0.8269-0.8192
str(train)
t<-getTree(fit200, 1, labelVar=TRUE)
t
head(t)
getConds<-function(tree){
  #store all conditions into a list
  conds<-list()
  #start by the terminal nodes and find previous conditions
  id.leafs<-which(tree$status==-1)
  j<-0
  for(i in id.leafs){
j<-j+1
prevConds<-prevCond(tree,i)
conds[[j]]<-prevConds$cond
while(prevConds$id>1){
  prevConds<-prevCond(tree,prevConds$id)
  conds[[j]]<-paste(conds[[j]]," & ",prevConds$cond)
  if(prevConds$id==1){
conds[[j]]<-paste(conds[[j]]," => ",tree$prediction[i])
        break()
      }
    }
  }
  return(conds)
}
#**************************
#find the previous conditions in the tree
#**************************
prevCond<-function(tree,i){
  if(i %in% tree$right_daughter){
id<-which(tree$right_daughter==i)
cond<-paste(tree$split_var[id],">",tree$split_point[id])
  }
  if(i %in% tree$left_daughter){
    id<-which(tree$left_daughter==i)
cond<-paste(tree$split_var[id],"<",tree$split_point[id])
  }
  return(list(cond=cond,id=id))
}
#remove spaces in a word
collapse<-function(x){
  x<-sub(" ","_",x)
  return(x)
}
getConds(t)
colnames(tree)<-sapply(colnames(tree),collapse)
tree<-t
colnames(tree)<-sapply(colnames(tree),collapse)
getConds(tree)
t<-getTree(fit5, 1, labelVar=TRUE)
t
tree<-t
colnames(tree)<-sapply(colnames(tree),collapse)
getConds(tree)
x
train
setwd('../blood/');
train<-read.csv('train.csv', header=T);
test<-read.csv('test.csv', header=T);
plot(train);
str(train);
train$Total.Volume.Donated..c.c..<-NULL
test$Total.Volume.Donated..c.c..<-NULL
fit10 <- randomForest(Made.Donation.in.March.2007~., data=train, importance=TRUE, ntree=10);
str(train);
fit10 <- randomForest(Made.Donation.in.March.2007~., data=train, importance=TRUE, ntree=10);
train$Made.Donation.in.March.2007<-as.factor(train$Made.Donation.in.March.2007)
fit10 <- randomForest(Made.Donation.in.March.2007~., data=train, importance=TRUE, ntree=10);
fit10
fit100 <- randomForest(Made.Donation.in.March.2007~., data=train, importance=TRUE, ntree=100);
fit100
fit1000 <- randomForest(Made.Donation.in.March.2007~., data=train, importance=TRUE, ntree=1000);
fit1000
fit10000 <- randomForest(Made.Donation.in.March.2007~., data=train, importance=TRUE, ntree=10000);
fit10000
predict.fit10000<-predict(fit10000, test);
predict.fit10000
varImpPlot(fit10000)
test
head(test)
getwd()
source('explore_fit.R');
str(test)
test$Made.Donation.in.March.2007<-0.5
str(test)
str(test)
test$Made.Donation.in.March.2007 <- factor(test$Made.Donation.in.March.2007, levels=levels(train$Made.Donation.in.March.2007))
str(test)
source('explore_fit.R');
source('explore_fit.R');
table(train$Made.Donation.in.March.2007)
plot(train$Months.since.Last.Donation, train$Months.since.First.Donation)
plot(train$Months.since.Last.Donation, train$Number.of.Donations)
plot(train$Months.since.Last.Donation, train$Number.of.Donations, col=train$Made.Donation.in.March.2007)
boxplot(train$Months.since.Last.Donation, train$Number.of.Donations, col=train$Made.Donation.in.March.2007)
plot(train$Months.since.Last.Donation, train$Number.of.Donations, col=train$Made.Donation.in.March.2007)
out<-data.frame(X=test$X, "Made Donation in March 2007"=predict.fit10000)
table(out$Made.Donation.in.March.2007)
proc.table(table(out$Made.Donation.in.March.2007))
as.proc(table(out$Made.Donation.in.March.2007))
table(out$Made.Donation.in.March.2007)/200
table(train$Made.Donation.in.March.2007)/(438+138)
plot(train$Months.since.Last.Donation, train$Months.since.First.Donation, pch=20, col=train$Made.Donation.in.March.2007)
plot(train$Months.since.Last.Donation, train$Months.since.First.Donation, pch=20)
plot(test$Months.since.Last.Donation, test$Months.since.First.Donation, pch=20)
plot(train$Months.since.Last.Donation, train$Months.since.First.Donation, pch=20)
plot(test$Months.since.Last.Donation, test$Months.since.First.Donation, pch=20)
plot(train$Months.since.Last.Donation, train$Months.since.First.Donation, pch=20)
plot(test$Months.since.Last.Donation, test$Months.since.First.Donation, pch=20)
plot(train$Months.since.Last.Donation, train$Months.since.First.Donation, pch=20)
plot(train$Months.since.Last.Donation, train$Months.since.First.Donation, pch=20)
plot(test$Months.since.Last.Donation, test$Months.since.First.Donation, pch=20)
plot(train$Months.since.Last.Donation, train$Months.since.First.Donation, pch=20)
str(train);
plot(train$X, train$Months.since.Last.Donation)
plot(train$Months.since.Last.Donation, train$Months.since.First.Donation, pch=20)
plot(train$Months.since.Last.Donation, train$Number.of.Donations, pch=20)
plot(train$Months.since.Last.Donation);
summary(train$Months.since.Last.Donation);
subset(train, train$Months.since.Last.Donation>=30);
train<-subset(train, train$Months.since.Last.Donation<plot(train$Months.since.Last.Donation, train$Months.since.First.Donation, pch=20)=30);
plot(train$Months.since.Last.Donation, train$Months.since.First.Donation, pch=20)
source('explore_fit.R');
fit10000
out<-data.frame(X=test$X, "Made Donation in March 2007"=paste(predict.fit10000,'.0'));
out
str(out)
out<-data.frame(X=test$X, "Made Donation in March 2007"=as.numeric(predict.fit10000));
str(out)
predict.fit10000<-predict(fit10000, test);
out<-data.frame(X=test$X, "Made Donation in March 2007"=as.numeric(predict.fit10000));
out
predict.fit10000<-predict(fit10000, test);
predict.fit10000
out<-data.frame(X=test$X, "Made Donation in March 2007"=predict.fit10000);
out
table(out$Made.Donation.in.March.2007)
source('explore_fit.R');
table(out$Made.Donation.in.March.2007)
source('explore_fit.R');
table(out$Made.Donation.in.March.2007)
source('explore_fit.R');
out<-data.frame(X=test$X, "Made Donation in March 2007"=predict.fit10000);
out<-data.frame(X=test$X, "Made Donation in March 2007"=as.numeric(predict.fit10000));
head(out)
out<-data.frame(X=test$X, "Made Donation in March 2007"=as.numeric(predict.fit10000-1));
out<-data.frame(X=test$X, "Made Donation in March 2007"=as.numeric(predict.fit10000)-1);
head(out)
source('explore_fit.R');
source('explore_fit.R');
q()
